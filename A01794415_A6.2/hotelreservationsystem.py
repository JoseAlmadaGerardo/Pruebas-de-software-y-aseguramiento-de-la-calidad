# -*- coding: utf-8 -*-
"""HotelReservationSystem.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W6OeK_c4-HuRxdleYT0c6u1AvxaeI8lC
"""

from datetime import date
import json
import os


class Hotel:
    """
    A class to represent a Hotel.

    Attributes:
    - name (str): The name of the hotel.
    - location (str): The location of the hotel.
    - phone (str): The phone number of the hotel.
    """

    def __init__(self, name, location, phone):
        """
        Initialize the Hotel instance with name, location, and phone.
        """
        self.name = name
        self.location = location
        self.phone = phone

    def display_info(self):
        """
        Display the information of the hotel.
        """
        print(f"Hotel Name: {self.name}")
        print(f"Location: {self.location}")
        print(f"Phone: {self.phone}")


class Customer:
    """
    A class to represent a Customer.

    Attributes:
    - name (str): The name of the customer.
    - email (str): The email of the customer.
    - phone (str): The phone number of the customer.
    """

    def __init__(self, name, email, phone):
        """
        Initialize the Customer instance with name, email, and phone.
        """
        self.name = name
        self.email = email
        self.phone = phone

    def display_info(self):
        """
        Display the information of the customer.
        """
        print(f"Customer Name: {self.name}")
        print(f"Email: {self.email}")
        print(f"Phone: {self.phone}")


class Reservation:
    """
    A class to represent a Reservation.

    Attributes:
    - customer (Customer): The customer making the reservation.
    - hotel (Hotel): The hotel for the reservation.
    - date (datetime.date): The date of the reservation.
    """

    def __init__(self, customer, hotel, date):
        """
        Initialize the Reservation instance with customer, hotel, and date.
        """
        self.customer = customer
        self.hotel = hotel
        self.date = date


class MainApplication:
    def __init__(self):
        self.hotel_manager = HotelManager()
        self.customer_manager = CustomerManager()
        self.reservation_manager = ReservationManager()

    def run(self):
        while True:
            print("-----------------------------------------")
            print("Welcome to Main Menu")
            print("1. Hotel Management")
            print("2. Customer Management")
            print("3. Reservation Management")
            print("4. Exit")
            choice = input("Enter your choice (1-4): ")

            if choice == '1':
                self.hotel_manager.run()
            elif choice == '2':
                self.customer_manager.run()
            elif choice == '3':
                self.reservation_manager.run()
            elif choice == '4':
                break
            else:
                print("Invalid choice. Please try again.")


class HotelManager:
    def __init__(self):
        self.database = HotelDatabase()

    def run(self):
        self.database.load_data()

        while True:
            print("-----------------------------------------")
            print("Welcome to Hotel Management System")
            print("1. Create Hotel")
            print("2. Display Hotel Information")
            print("3. Display all Hotels information")
            print("4. Modify Hotel Information")
            print("5. Delete Hotel")
            print("6. Return to main menu")
            choice = input("Enter your choice (1-6): ")

            if choice == '1':
                self.create_hotel()
                self.database.save_data()
            elif choice == '2':
                hotel_name = input("Enter hotel name: ")
                self.database.display_hotel_info(hotel_name)
            elif choice == '3':
                self.database.display_all_hotels_info()
            elif choice == '4':
                hotel_name = input("Enter hotel name: ")
                if hotel_name.lower() in self.database.hotels:
                    hotel = self.database.hotels[hotel_name.lower()]
                    print("What information do you want to modify?")
                    print("1. Hotel Name")
                    print("2. Location")
                    print("3. Phone")
                    modify_choice = input("Enter your choice (1-3): ")

                    if modify_choice == '1':
                        new_name = input("Enter new hotel name: ")
                        hotel.name = new_name
                        print("Hotel name updated.")
                        self.database.save_data()  # Call save_data()
                    elif modify_choice == '2':
                        new_location = input("Enter new location: ")
                        hotel.location = new_location
                        print("Location updated.")
                        self.database.save_data()  # Call save_data()
                    elif modify_choice == '3':
                        new_phone = input("Enter new phone: ")
                        hotel.phone = new_phone
                        print("Phone updated.")
                        self.database.save_data()  # Call save_data()
                    else:
                        print("Invalid choice.")
                else:
                    print("Hotel not found.")
            elif choice == '5':
                hotel_name = input("Enter hotel name: ")
                if hotel_name.lower() in self.database.hotels:
                    del self.database.hotels[hotel_name.lower()]
                    print(f"Hotel '{hotel_name}' deleted.")
                    self.database.save_data()  # Call save_data()
                else:
                    print("Hotel not found.")
            elif choice == '6':
                self.database.save_data()  # Call save_data()
                break
            else:
                print("Invalid choice.Please try again.")

    def create_hotel(self):
        name = input("Enter hotel name: ")
        location = input("Enter location: ")
        phone = input("Enter phone: ")
        hotel = Hotel(name, location, phone)
        self.database.save_hotel(hotel)
        print(f"Hotel '{name}' created.")


class CustomerManager:
    def __init__(self):
        self.database = CustomerDatabase()

    def run(self):
        while True:
            print("-----------------------------------------")
            print("Welcome to Customer Management System")
            print("1. Create Customer")
            print("2. Delete Customer")
            print("3. Display Customer Information")
            print("4. Modify Customer Information")
            print("5. Return to main menu")
            choice = input("Enter your choice (1-5): ")

            if choice == '1':
                self.create_customer()
                self.database.save_data()
            elif choice == '2':
                self.delete_customer()
                self.database.save_data()
            elif choice == '3':
                self.display_customer_info()
            elif choice == '4':
                self.modify_customer_info()
                self.database.save_data()
            elif choice == '5':
                break
            else:
                print("Invalid choice. Please try again.")

    def create_customer(self):
        name = input("Enter customer name: ")
        email = input("Enter customer email: ")
        phone = input("Enter customer phone: ")
        customer = Customer(name, email, phone)
        self.database.save_customer(customer)
        print(f"Customer '{name}' created.")

    def delete_customer(self):
        name = input("Enter customer name: ")
        if name.lower() in self.database.customers:
            del self.database.customers[name.lower()]
            print(f"Customer '{name}' deleted.")
        else:
            print("Customer not found.")

    def display_customer_info(self):
        name = input("Enter customer name: ")
        name_lower = name.lower()
        if name_lower in self.database.customers:
            self.database.customers[name_lower].display_info()
        else:
            print("Customer not found.")

    def modify_customer_info(self):
        name = input("Enter customer name: ")
        name_lower = name.lower()
        if name_lower in self.database.customers:
            customer = self.database.customers[name_lower]
            print("What information do you want to modify?")
            print("1. Customer Name")
            print("2. Email")
            print("3. Phone")
            modify_choice = input("Enter your choice (1-3): ")

            if modify_choice == '1':
                new_name = input("Enter new customer name: ")
                customer.name = new_name
                print("Customer name updated.")
            elif modify_choice == '2':
                new_email = input("Enter new email: ")
                customer.email = new_email
                print("Email updated.")
            elif modify_choice == '3':
                new_phone = input("Enter new phone: ")
                customer.phone = new_phone
                print("Phone updated.")
            else:
                print("Invalid choice.")
        else:
            print("Customer not found.")


class ReservationManager:
    def __init__(self):
        self.rooms = {}
        self.available_rooms = {'std': [101, 102, 103], 'delux': [201, 202, 203], 'suite': [301, 302, 303]}
        self.roomprice = {1: 200, 2: 300, 3: 400}
        self.database = ReservationDatabase()

    def run(self):
        while True:
            print("-----------------------------------------")
            print("Welcome to Hotel")
            print("1. Check in")
            print("2. Display Occupied Rooms")
            print("3. Check out")
            print("4. Return main menu")
            choice = input("Enter your choice (1-4): ")
            if choice == '1':
                name = input("Enter Client Name: ")
                address = input("Enter Address: ")
                phone = input("Enter contact no.: ")
                self.check_in(name, address, phone)
            elif choice == '2':
                self.display_occupied_rooms()
            elif choice == '3':
                room_number = int(input("Enter room number: "))
                self.check_out(room_number)
            elif choice == '4':
                break
            else:
                print("Invalid choice. Please try again.")

    def check_in(self, name, address, phone):
        roomtype = int(input("Room types: \n1. Standard \n2. Deluxe \n3. Suite \nSelect a room type: "))
        if roomtype in [1, 2, 3]:
            if self.available_rooms['std'] and roomtype == 1:
                room_no = self.available_rooms['std'].pop(0)
            elif self.available_rooms['delux'] and roomtype == 2:
                room_no = self.available_rooms['delux'].pop(0)
            elif self.available_rooms['suite'] and roomtype == 3:
                room_no = self.available_rooms['suite'].pop(0)
            else:
                print('Sorry, room not available')
                return
            try:
                d, m, y = map(int, input("Enter check-in date in dd mm yyyy format: ").split())
                check_in_date = date(y, m, d)
            except ValueError:
                print("Invalid date format. Please enter the date in the format dd mm yyyy.")
                return
            self.rooms[room_no] = {'name': name, 'address': address, 'phone': phone, 'check_in_date': check_in_date,
                                   'room_type': roomtype}
            print(f'Checked in {name}, {phone} to room: {room_no} on {check_in_date}')
            self.database.save_data()
        else:
            print('Choose a valid room type')

    def display_occupied_rooms(self):
        if not self.rooms:
            print('No rooms are occupied at the moment.')
        else:
            print("Occupied Rooms: ")
            print("------------------------------")
            print('Room no. Name Phone')
            print("------------------------------")
            for room_number, details in self.rooms.items():
                print(room_number, '\t', details['name'], '\t', details['phone'])

    def check_out(self, room_number):
        if room_number in self.rooms:
            check_out_date = date.today()
            check_in_date = self.rooms[room_number]['check_in_date']
            duration = (check_out_date - check_in_date).days
            roomtype = self.rooms[room_number]['room_type']
            if roomtype in [1, 2, 3]:
                if roomtype == 1:
                    self.available_rooms['std'].append(room_number)
                elif roomtype == 2:
                    self.available_rooms['delux'].append(room_number)
                elif roomtype == 3:
                    self.available_rooms['suite'].append(room_number)
                print('--------------------------------------------------')
                print('Hotel Receipt')
                print(f"Name: {self.rooms[room_number]['name']}")
                print(f"Phone: {self.rooms[room_number]['phone']}")
                print(f'Room Number: {room_number}')
                print(f'Check in date: {check_in_date.strftime("%d %B %Y")}')
                print(f'Check out date: {check_out_date.strftime("%d %B %Y")}')
                print(f'No of days: {duration}\tPrice per day: ${self.roomprice[roomtype]}')
                roombill = self.roomprice[roomtype] * duration
                print('Room bill: $', roombill)
                print('Total bill: $', roombill)
                del self.rooms[room_number]
                self.database.save_data()
            else:
                print("Invalid room type")
                return
        else:
            print(f"Room {room_number} is not occupied")
            return


class HotelDatabase:
    """
    A class to manage hotel data.
    """

    def __init__(self):
        """
        Initialize the HotelDatabase instance.
        """
        self.hotels = {}
        self.file_name = "Hoteldata.json"

    def save_hotel(self, hotel):
        """
        Save hotel data.
        """
        self.hotels[hotel.name.lower()] = hotel

    def save_data(self):
        """
        Save hotel data to a JSON file.
        """
        hoteldata = {'hotels': [hotel.__dict__ for hotel in self.hotels.values()]}
        with open(self.file_name, 'w', encoding='utf-8') as file:
            json.dump(hoteldata, file, indent=2)

    def load_data(self):
        """
        Load hotel data from a JSON file.
        """
        try:
            with open(self.file_name, 'r', encoding='utf-8') as file:
                hoteldata = json.load(file)
                if 'hotels' in hoteldata:
                    self.hotels = {
                        hotel['name'].lower(): Hotel(hotel['name'], hotel['location'], hotel['phone']) 
                        for hotel in hoteldata['hotels']
                    }
                else:
                    self.hotels = {}
        except FileNotFoundError:
            pass

    def display_hotel_info(self, hotel_name):
        """
        Display hotel information.
        """
        hotel_name_lower = hotel_name.lower()
        if hotel_name_lower in self.hotels:
            self.hotels[hotel_name_lower].display_info()
        else:
            print("Hotel not found.")

    def display_all_hotels_info(self):
        """
        Display information for all hotels.
        """
        if self.hotels:
            print("All Hotels Information:")
            for hotel_name, hotel in self.hotels.items():
                print("-----------------------------------------")
                hotel.display_info()
        else:
            print("No hotels created yet.")


class CustomerDatabase:
    """
    A class to manage customer data.
    """

    def __init__(self):
        """
        Initialize the CustomerDatabase instance.
        """
        self.customers = {}
        self.file_name = "Customerdata.json"

    def save_customer(self, customer):
        """
        Save customer data.
        """
        self.customers[customer.name.lower()] = customer

    def save_data(self):
        """
        Save customer data to a JSON file.
        """
        customersdata = {'customers': [customer.__dict__ for customer in self.customers.values()]}
        with open(self.file_name, 'w', encoding='utf-8') as file:
            json.dump(customersdata, file, indent=2)

    def load_data(self):
        """
        Load customer data from a JSON file.
        """
        try:
            with open(self.file_name, 'r', encoding='utf-8') as file:
                customersdata = json.load(file)
                if 'customers' in customersdata:
                    self.customers = {
                        customer['name'].lower(): Customer(customer['name'], customer['email'], customer['phone']) 
                        for customer in customersdata['customers']
                    }
                else:
                    self.customers = {}
        except FileNotFoundError:
            pass


class ReservationDatabase:
    """
    A class to manage reservation data.
    """

    def __init__(self):
        """
        Initialize the ReservationDatabase instance.
        """
        self.reservations = []
        self.file_name = "Reservationdata.json"

    def save_reservation(self, reservation):
        """
        Save reservation data.
        """
        self.reservations.append(reservation)

    def save_data(self):
        """
        Save reservation data to a JSON file.
        """
        Reservationdata = {'reservations': [reservation.__dict__ for reservation in self.reservations]}
        with open(self.file_name, 'w', encoding='utf-8') as file:
            json.dump(Reservationdata, file, indent=2)

    def load_data(self):
        """
        Load reservation data from a JSON file.
        """
        if not os.path.exists(self.file_name):
            with open(self.file_name, 'w', encoding='utf-8') as file:
                file.write('{}')

        try:
            with open(self.file_name, 'r', encoding='utf-8') as file:
                Reservationdata = json.load(file)
                if 'reservations' in Reservationdata:
                    self.reservations = [
                        Reservation(reservation) for reservation in Reservationdata['reservations']
                    ]
                else:
                    self.reservations = []
        except FileNotFoundError:
            pass


if __name__ == "__main__":
    app = MainApplication()
    app.run()
